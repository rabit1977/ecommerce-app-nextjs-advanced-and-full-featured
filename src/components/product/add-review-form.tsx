'use client';

import React, { useState, useEffect, useRef } from 'react';
import { useApp } from '@/lib/context/app-context';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Review } from '@/lib/types';
import { Star } from 'lucide-react';

interface AddReviewFormProps {
  productId: string;
  reviewToEdit?: Review | null; // New optional prop for editing
  onCancelEdit: () => void;
}

const AddReviewForm = ({ productId, reviewToEdit, onCancelEdit }: AddReviewFormProps) => {
  const { user, addReview } = useApp();
  const [rating, setRating] = useState(reviewToEdit?.rating || 0);
  const [comment, setComment] = useState(reviewToEdit?.comment || '');
  const inputRef = useRef<HTMLTextAreaElement>(null); // NEW: Create a ref for the textarea

  // Effect to reset form or set initial values when a new review is selected for editing
  useEffect(() => {
    if (reviewToEdit) {
      setRating(reviewToEdit.rating);
      setComment(reviewToEdit.comment);
      // NEW: Automatically focus the textarea when entering edit mode
      if (inputRef.current) {
        inputRef.current.focus();
      }
    } else {
      setRating(0);
      setComment('');
    }
  }, [reviewToEdit]);

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (!user || rating === 0 || comment.trim() === '') {
      return;
    }

    addReview(productId, {
      // id: reviewToEdit?.id || Date.now(), // The `id` is generated by the `addReview` function if not provided
      name: user.name,
      rating,
      comment,
      helpful: reviewToEdit?.helpful || 0,
    });

    // Reset form after submission
    setRating(0);
    setComment('');
    onCancelEdit(); // Exit edit mode
  };

  return (
    <div className='mt-8 p-6 bg-slate-100 rounded-lg dark:bg-slate-800'>
      <h3 className='text-lg font-semibold dark:text-white'>
        {reviewToEdit ? 'Edit Your Review' : 'Write a Review'}
      </h3>
      <form onSubmit={handleSubmit} className='mt-4'>
        <div className='flex items-center gap-1'>
          {[1, 2, 3, 4, 5].map((starValue) => (
            <Star
              key={starValue}
              className={`h-6 w-6 cursor-pointer ${
                starValue <= rating ? 'text-yellow-400' : 'text-slate-300 dark:text-slate-600'
              }`}
              onClick={() => setRating(starValue)}
            />
          ))}
        </div>
        <Textarea
          ref={inputRef} // NEW: Attach the ref to the Textarea
          placeholder='Share your thoughts on this product...'
          value={comment}
          onChange={(e) => setComment(e.target.value)}
          className='mt-4 min-h-[100px] bg-white dark:bg-slate-900 dark:text-white'
        />
        <div className='mt-4 flex gap-2'>
          <Button type='submit' disabled={rating === 0 || comment.trim() === ''}>
            {reviewToEdit ? 'Update Review' : 'Submit Review'}
          </Button>
          {reviewToEdit && (
            <Button type='button' variant="outline" onClick={onCancelEdit}>
              Cancel
            </Button>
          )}
        </div>
      </form>
    </div>
  );
};

export { AddReviewForm };
